## RoyalCommands v${project.version} Config File

###
# General section #
###

general:
  # Smooth time transitions?
  use_smooth_time: true
  # Override natural respawn location with the world's spawn?
  override_respawn: true
  # At what percentage interval should /findip alert the command sender about progress?
  # /findip will attempt to be as close to this percent when it sends updates (if this is 25, it will send updates at
  # 25%, 50%, 75%, and 100%)
  findip_alert_percentage: 25.0
  # Alert sleeping players about others who are sleeping in the same world
  sleep_notifications: true
  # Sleep majority?
  sleep_majority: true
  sleep_majority_percentage: 50.0

###
# Security #
###

security:
  hastebin:
    # Should any caught command exceptions be pasted to Hastebin? If true, a handy link to the stack trace and other
    # useful debug information will be generated for the player to give to the developers. It will also be output in the
    # console.
    errors: true
    # Should any command that has copious amounts of data paste it to Hastebin rather than spam the console/player?
    general: true
  # Disable /getip and /compareip?
  disable_getip: false
  # Use the rcmds.build perm?
  use_build_perm: false

###
# Plugins #
###

plugins:
  # Use VanishNoPacket integration?
  use_vanish: true

###
# /helm #
###

helm:
  # Require the player to have the item for /helm in their inventory?
  require_item: false

###
# Help options #
###

help:
  # Custom /help (help.txt - same format as rules.txt)?
  custom:
    enabled: false
  # Amount of lines to display in /help per page
  lines: 5

###
# Updates #
###

updates:
  # Check to see if the version of CraftBukkit you're running is safe?
  version_check: true
  # Check for new versions of RoyalCommands?
  update_check: false

###
# Backpack #
###

backpack:
  # Reset /backpack on death?
  reset_on_death: false

###
# /dump #
###

dump:
  # Should /dump create a new chest or dump into an existing chest?
  # Checks if player can build via WorldGuard, and checks if player can access chest via
  # LWC.
  create_chest: true
  # Should /dump use chests from inventory if dump_create_chest is true?
  use_inv: true

###
# Warps #
###

warps:
  # Should warps be limited by permissions? rcmds.warp.warpname
  explicit_permissions: false

###
# Trade #
###

trade:
  # Allow trades between players with different gamemodes?
  between_gamemodes: false
  help: |
    <book>
    <title>Trade Help</title>
    <author>RoyalCommands</author>
    <page>
    Welcome to the trade system in RoyalCommands.
    This book aims to detail the methods in which the system works and how to best utilize it.
    </page>
    <page>
    §lTable of Contents§0
    I. Understanding Trades
    II. Initiating a Trade
    III. Updating a Trade
    IV. Completing a Trade
    </page>
    <page>
    §lI. Understanding Trades§0
    A trade is a controlled exchange of items (and commands) between two players. Both players must be in agreeance before a trade can be made.
    The initiator of a trade is called the "trader." The
    </page>
    <page>
    recipient is the "tradee."
    The trader always has the left side of a trade to make offers in, and the tradee always has the right side. If you're unsure which side you have, the title of the trade (above the trade inventory) will have your name on
    </page>
    <page>
    either the left or right of a slash ("/"), and that corresponds to the side you have.
    Both parties may add items they wish to trade and commands that they want to perform or have the other party perform. Neither party may modify
    </page>
    <page>
    the other side of the trade.
    In order for a trade to be completed, both sides must agree by using the button in the middle of the middle column. Once you have agreed to a trade, you may not modify your offer unless you disagree by clicking the
    </page>
    <page>
    button again. If the other party changes their trade after you have agreed, you will automatically decline the trade so you can review the new offer before agreeing.
    Once a trade has been agreed to by both sides, a series of events will unfold.
    </page>
    <page>
    First, the trade will be closed. Starting with the offer the trader made, items will be transferred to the tradee. If any commands were specified for the trader to perform, he will perform them when the item representing them is met.
    </page>
    <page>
    Next, the tradee's offer will be processed in the same manner as the trader's.
    Finally, the trade will destroy itself if it is successful, allowing for a new trade to be made. If unsuccessful, the trade will remain open with any items
    </page>
    <page>
    unable to be traded still present.
    </page>
    <page>
    §lII. Initiating a Trade§0
    Now that you understand what trades are and how they work, you should know how to start a trade.
    To do so, use the following command: /trade name
    Replace name with
    </page>
    <page>
    the name of the person you would like to trade with. This person does not need to be online, but please note that any trades made will be lost if the server restarts.
    If someone else has started a trade with you, you perform the same command to
    </page>
    <page>
    access it.
    After performing this command, the trade interface will open before you.
    </page>
    <page>
    §lIII. Updating a Trade§0
    You may now add items to your trade. If you need to close the trade, do so. It will not go away. You can open the trade again at any time using
    </page>
    <page>
    the same command you used to create it.
    </page>
    <page>
    §lIV. Completing a Trade§0
    Once you have made your offer, you may then accept the trade. If the other person modifies their offer, you will automatically decline the trade to review the new offer. Once the other
    </page>
    <page>
    person accepts the offer, the trade will process as defined in section I.
    The trade is now complete!
    If you have any additional questions, contact a server administrator.
    </page>
    </book>

###
# PluginManager #
###

pluginmanager:
  # Specify custom update tags for plugins to be checked in PluginManager updates.
  # PluginName: "tag-on-bukkitdev"
  custom_tags:
    #ExamplePlugin: "example-plugin"

###
# MOTD #
###

motd:
  options:
    # Show /motd on login?
    display_on_login: true
  # The message of the day
  content:
  - "&dWelcome to {servername}, {dispname}!"
  - "&fThere are &8{players}&r players online:"
  - "{playerlist}"
  - "You are in the world &8{world}&r."

###
# Kits #
###

kits:
  options:
    # Use rcmds.kit.[kit-name] (true) or just rcmds.kit (false)
    exclusive_perms: false
  # Define kits here
  list:
    # Kit name. This kit will be called "default"
    default:
      # Description shown to the player on /kits.
      description: An example kit.
      # List of items for this kit
      items:
        - type: LOG:OAK
          amount: 1
          # You can use colors in lore and names
          name: "&rWood of Champions"
        - type: WOODEN_SWORD
          amount: 1
          name: "Skyforge Wood Sword"
          lore:
            - "Wooden sword forged in the Skyforge"
          # Enchantments that can't naturally be applied can be used here
          enchantments:
            - type: DAMAGE_ALL
              level: 2
            - type: DURABILITY
              level: 1
      # Cooldown of one day
      cooldown: "1d"
    wool:
      description: A kit containing wool.
      items:
        - type: WOOL:BLACK
          amount: 64
        - type: WOOL:BLUE
          amount: 35
    # This kit can only be used once (cooldown of -1)
    onetime:
      description: A kit that can only be used one time.
      items:
        - type: IRON_SWORD
          amount: 1
      cooldown: -1

###
# Messages #
###

messages:
  options:
    # Enable the welcome message for new players?
    enable_welcome_message: true
    # Broadcast time changes via /time?
    broadcast_time_changes: false
    colors:
      positive: BLUE
      negative: RED
      neutral: GRAY
      reset: RESET
  # Message to be shown if player does not have rcmds.build
  no_build: "&cYou don't have permission to build!"
  # The message to be displayed if enable_welcome_message is true
  welcome: "&5Welcome {name} to the server!"
  # Broadcast format (no variables support, just color codes) - message follows this immediately after this
  bcast_format: "&b[&aBroadcast&b]&a "

###
# Kicks #
###

kicks:
  messages:
    # The format for ingame kick messages. Put a "k" in front of a variable name to specify
    # that it's for the person who was kicked.
    # {kdispname} = Display name of person who was kicked
    # {dispname}  = Display name of person used /kick
    ingame_format: "&7{kdispname}&c was kicked by &7{dispname}&c for &7{reason}&c."
    # The format to be shown when kicked.
    # \n is a newline
    format: "&4Kicked&r: {reason}&r\nBy {dispname}"
    # The default kick message for /kick
    default: "Kicked from server."

###
# Bans #
###

bans:
  # Commands to be issued before a player is kicked when banned. These only run on permabans. All commands are sent by
  # the player that did the banning, unless the command is prefixed with "@" - those are sent from console.
  actions:
    - "@lwc admin purge {name}" # Does /lwc admin purge {name} in the console.
    - "me ultrabanned {name}" # Does /me ultrabanned {name} from the banner.
  permanent:
    messages:
      # The default ban message for /ban
      default: "&4Banhammered!"
      # The format to show to players in-game when someone is banned
      ingame_format: "&7{kdispname}&c was banned by &7{dispname}&c for &7{reason}&c."
      # The format to show to the banned player
      format: "&4Banned&r: {reason}&r\nBy {dispname}"
  unban:
    messages:
      ingame_format: "&7{kdispname}&9 was unbanned by &7{dispname}&9."
  ip:
    messages:
      # Note that no banner is known for this type of ban. You cannot use {(disp)name} here.
      format: "&4IP Banned&r: &7{ip}&r has been banned from this server."
  temp:
    messages:
      ingame_format: "&7{kdispname}&c was tempbanned by &7{dispname}&c for &7{length}&c for &7{reason}&c."
      format: "&4Tempbanned&r: {length}&r\nFor {reason}&r by {dispname}"

###
# Player list #
###

playerlist:
  # /playerlist format ({prefix}, {suffix}, {name}, {dispname}, and {group} supported, as well at text and color codes
  format: "{prefix}{dispname}"
  # Display /playerlist as a simple list (true) or display it separated by groups (false)?
  simple: true
  # How groups should be displayed if simple is false.
  # Only variables are {prefix}, {group}, and {suffix}
  group_format: "{prefix}{group}{suffix}"

###
# Near #
###

near:
  # Default /near radius - when /near is run without a radius
  default_radius: 50
  # Maximum /near radius (2000 is recommended, large numbers like /near 1000000 crash servers)
  max_radius: 2000

###
# Spawnmob #
###

spawnmob:
  # The maximum number of mobs allowed by /spawnmob
  spawn_limit: 15

###
# Explode #
###

explode:
  # The default power for /explode - 4 is creeper
  default_power: 4
  # Maximum explode power (~50 is recommended)
  max_power: 10
  # Should /explode create fire around the explosion?
  fire: false

###
# Homes #
###

homes:
  # Limit the amount of homes available to be set with /sethome
  # These will not override rcmds.sethome.multi; you must have it to set more than 1 home
  # You can limit people to 0 homes without it, though.
  # 0 for none, -1 for infinite
  # Remember, a player limit will override a group limit.
  # If jkcclemens is in the group Mod, but he also has a player limit of 10, he can set 10 homes instead of 5.
  # There is no default home limit; if a group/player does not have a limit here, they can set:
  # - 1 home if they don't have rcmds.sethome.multi
  # - Unlimited homes if they do
  limits:
    groups:
      Mod: 5
      Admin: 10
    players:
      jkcclemens: -1
      WizardCM: 7
      Herobrine: 0

###
# Warns #
###

warns:
  # Commands to perform based on the amount of warns a player has
  # These commands are performed by the console. Any command output will be sent to the console.
  # Keep preceding slash
  actions:
    1: "/tempban {player} 500" # Happens on the first warn
    2: "/kick {player} {reason}" # Happens on the second warn
    3: "/ban {player} &4You have reached the warn limit!" # Happens on the third warn
  # Amount of time in seconds before warns expire - set to 0 to disable
  # 3600 = 1 hour
  # 86400 = 1 day
  # 604800 = 1 week
  expire_after: 604800
  # The default warn message for /warn
  default_message: "You have been warned."

###
# Teleports #
###

teleports:
  options:
    # Make teleports try to find ground for the teleported player, rather than teleport into midair?
    safe: true
    # Make players stay still for a set amount of time before teleporting?
    # Time is in seconds.
    # 0 to disable
    warmup: 0
    # Creates cooldowns for global teleports
    # Note that this will apply a cooldown to EVERY teleport done, and not just the /tp command. Whether it be a plugin
    # like NoCheat teleporting you back (!), or Towny spawns, it will apply the cooldown.
    # 0 is off
    global_cooldown: 0
  back:
    # Enable /back on death?
    death: true
    # Maximum amount of locations to save for /back.
    # Can be utilized with /back location#.
    # Set to 1 for only /back.
    max_stack: 5
    # Worlds to disable /back from registering in.
    disabled_worlds:
    - someworldhere
  spawn:
    login:
      # Put /all/ players at set spawn point (/setspawn) when they login?
      send_all:
        enabled: false
        # Add previous location to /back?
        register_back: false
      # Put /new/ players at set spawn point (/setspawn) when they login?
      send_new: true
  worlds:
    # Require rcmds.worldaccess.worldname to access a world?
    worldaccess_perm: false
    # Worlds to hide from listing and disallow teleportation to
    hidden:
    - someworldhere
  sound:
    enabled: false
    sound: ENTITY_ENDERMAN_TELEPORT
    volume: 1
    pitch: 1
  # Options for teleporting players on vehicles
  vehicles:
    # If true, teleporting players on vehicles will teleport their vehicle
    enabled: true
    options:
      # Allow teleporting on vehicles between worlds?
      cross_world: false
      # Enable on vehicles?
      vehicles: true
      # Enable on animals?
      animals: true
      # Enable on players?
      players: false

###
# Dynamic Whitelist
###

# The dynamic whitelist can be altered ingame and will be reloaded upon /rcmds.
whitelist:
  # Use the dynamic whitelist?
  enabled: false
  # Message to use if player is denied by the whitelist.
  message: "You are not whitelisted on this server!"

###
# AFK management #
###

afk:
  messages:
    # The format of the message used in /afk and auto-AFK.
    # Variables allowed are {prefix}, {suffix}, {group}, {name}, {dispname}, {world}
    afk_format: "{dispname} is now AFK."
    # The format of the message used when returning from AFK.
    # Variables are the same as afk_format.
    return_format: "{dispname} is no longer AFK."
  auto:
    times:
      # Time in seconds to automatically set an idle player to afk
      # Default is 120 (2 minutes)
      # Disable by setting to 0
      afk: 120
      # Time in seconds for afk kicks
      # Default is 300 (kicks after 5 minutes)
      # Disable by setting to 0
      kick: 300

###
# Commands #
###

commands:
  logging:
    # Whether to show commands in console
    view_commands: true
    # Commands to not show up if command logging is on
    # Please use all lowercase and no preceding /
    blacklist:
    - login
    - l
    # Commands to filter out of /commandspy mode. Aliases are allowed, and one alias will match all.
    # Again, all lowercase and no preceding /
    command_spy_blacklist:
    - login
    - msg
  # Commands to block when muted
  mute_blocked: ["/me", "/tc", "/nc"]
  # command: cooldown (seconds)
  # Works for any command. Vanilla, rCmds, or any other
  # Even works for commands that don't exist
  # Cooldowns must be registered under their names in plugin.yml
  # e.g. /teleport, not /tp
  # Basically, you can't register aliases under command_cooldowns
  cooldowns:
    options:
      # Should cooldowns match aliases (e.g. /teleport and /tp have the same cooldown)?
      match_aliases: true
    list:
      # Matches /home, /home hello, etc. Does not match /homes
      home: 25
      teleport: 20
      save-all: 5
  # List of disabled commands. You MUST use full names.
  # e.g. teleport vs tp
  disabled:
  # - god
  # - teleport

###
# Nicks #
###

nicknames:
  # Prefix to go before nicknames.
  prefix: "*"
  # Also change the name in the player list (tab list)?
  set_player_list: false
  limits:
    # Limit how often a player can change his nick. -1 to disable
    time: 24h
    content:
      # Limit a player's nick with a regular expression. Don't enable this unless you really know what you're up to.
      regex:
        enabled: false
        pattern: "[\\w]{2,16}"
      colors:
        # Allow colors?
        enabled: true
        # Only allow colors if enabled is true and the player has the rcmds.nick.colors perm?
        only_with_perm: false
    # Limit the length of the nickname
    length:
      # Set a minimum length, or 0 to disable (will still have to be at least one character long).
      minimum: 2
      # Set a maximum length, or 0 to disable.
      maximum: 16

###
# Worlds & WorldManager #
###

worldmanager:
  enabled: true
  # This allows inventories to be separated on a per-world basis. Groups must be created for each group of worlds
  # (a group is allowed to consist of any amount of worlds). These groups will have different inventories.
  inventory_separation:
    enabled: false
    separate_xp: true
    separate_ender_chests: true
    remove_potion_effects: true
    # List of groups (can be named whatever)
    groups:
      survival:
      - "world"
      - "world_nether"
      creative:
      - "freebuild"
  # Use Multiverse world names? If Multiverse-Core is not installed, this makes no difference.
  multiverse_world_names: true
  who:
    show_empty_worlds: false

###
# Userdata handling #
###

userdata:
  # Update old userdata saved with names to UUIDs?
  update_old: true
  saving:
    # The interval to save userdata at. This will register a task to save all created (!) userdata every so often based
    # on what is entered here. If this is changed, the server requires a restart to update this value.
    # Default is "10m" (10 minutes)
    save_on_interval: "10m"
    # Should userdata handlers created for players that are no longer online be removed when userdata saving is
    # occurring?
    # This will not delete the userdata, but it will remove the handler, freeing memory.
    purge_unused_userdata_handlers: true

###
# Mail #
###

mail:
  check_interval: "10m"

###
# Assign #
###

# Options pertaining to /assign
assign:
  # Options pertaining to /publicassign
  public:
    # Should /pa be allowed on items that don't have custom names/lore? This will make it possible to bind commands to a
    # normal block or item for EVERY player if set to true.
    allow_on_generic_items: false
  # Differentiate between items based on their lore and display names?
  lore_and_display_names: true
  # Differentiate between items based on their durability? Note that tools will not make good /assign items if this is
  # true.
  durability: false

###
# Item management #
###

items:
  spawn:
    # The default stack size for /i and /give
    default_stack_size: 1
    # Drop items that don't fit in inventory on /i or /give?
    drop_extras: false
    # Items that cannot be spawned without rcmds.allowed.itemName
    blocked:
    - BEDROCK
    - OBSIDIAN
    - MONSTER_EGG
    # This is a tag applied on all items that are spawned. It will prevent spawned items from stacking with legit items.
    # It is not visible unless lore is specified. It is set in NMS data, set to be saved with the item in the world.
    tag:
      enabled: false
      plugins:
        # If ProtocolLib is installed, should it be used?
        # ProtocolLib is used to remove the blank line under the item name caused by the empty attribute used to store
        # the spawn data.
        protocollib: true
      # The lore to apply to spawned items. This allows for easy identification without /spawninfo.
      lore:
      - "&9Spawned"
